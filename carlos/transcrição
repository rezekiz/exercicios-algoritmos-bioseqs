'''
É possível utilizar funções predefinidas para a realização da transcrição, importando-as do BioPython:
'''

from Bio.Seq import Seq

'''
Assim basta definir a sequência a ser analisada
'''

# Sequência de DNA
sequencia_DNA = "ATGGTCTACGTCGATCGTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCT"

'''
E utilizar a função predefinida para realizar a transcrição 
'''

# Transcrição do DNA para RNA
rna_sequence = Seq(sequencia_DNA).transcribe()

print(rna_sequence)

'''


----


'''

def transc(seq):

    '''
        Função que itera sobre uma sequência de DNA e devolve
    a sequência transcrita.

    Lógica:
    A -> U
    T -> A
    C -> G
    G -> C

    Parameters:
    ------------
        seq : str Sequência de DNA
            Uma string que representa a sequência de DNA
    '''

    if not validar_dna(seq):
        print("Sequência inválida")
        return None

    '''
    Aqui é utilizada a função 'validar_dna' para garantir que a sequência não possui caracteres inválidos
    '''

    dna = aprimorar_dna(seq)
    mrna = ''

    '''
    A variável dna vai buscar a sequência aprimorada pela função definida anteriormente
    '''

    for base in dna:
        if base == 'A':
          mrna += 'U'
        elif base == 'T':
          mrna += 'A'
        elif base == 'C':
          mrna += 'G'
        elif base == 'G':
          mrna += 'C'
    '''
    Returns:
    --------
        str
          Sequência de mrna
    '''
    return mrna

'''
Chama a função 'transc' para fornecer uma varável, 'resultado'
'''

resultado = transc(seq)

'''
Se a sequência transcrita for válida, imprime o resultado
'''
if resultado is not None:
    print('A sequência de mRNA correspondente é:', resultado)





import unittest

class TestValidarData(unittest.TestCase):
    def test_transc_vazio(self):
        self.assertFalse( transc("") )
    
    def test_transc_separador_invalido(self):
        self.assertFalse( transc("AAAT-TG-CG.TGG.TG-TGGT") )

    def test_transc_nucleotido_invalido(self):
        self.assertFalse( transc("RATAFAT") )
        
    def test_transc_correta(self):
        self.assertTrue( transc(" AAACTGT CG ") )

    def test_transc_minuscula(self):
        self.assertTrue( transc("atgctcgatagct") )
    
    def test_trans_correta(self):
        self.assertEqual( transc('AATTCCGG'), 'UUAAGGCC' )


suite = unittest.TestLoader().loadTestsFromTestCase(TestValidarData)
unittest.TextTestRunner( verbosity=3 ).run( suite )